# üöÄ Auto-Unload f√ºr GeoJSON Importer
# Versucht automatisch die Work-DLL zu entladen
# Nur verwenden wenn Revit l√§uft und Work-DLL geladen ist

Write-Host "üöÄ Auto-Unload f√ºr GeoJSON Importer..." -ForegroundColor Cyan

# Pr√ºfe ob Revit l√§uft
$revitProcesses = Get-Process -Name "Revit" -ErrorAction SilentlyContinue

if (-not $revitProcesses) {
    Write-Host "‚úÖ Revit l√§uft nicht - nichts zu entladen" -ForegroundColor Green
    exit 0
}

Write-Host "üîç Revit l√§uft - versuche Work-DLL zu entladen..." -ForegroundColor Yellow

# Versuche die Work-DLL √ºber Revit API zu entladen
# Das ist komplex, aber m√∂glich √ºber COM-Interop
try {
    # Hier k√∂nnte man versuchen, √ºber Revit API die Work-DLL zu entladen
    # Das ist aber sehr komplex und fehleranf√§llig
    
    Write-Host "‚ö†Ô∏è  Automatisches Entladen ist komplex und fehleranf√§llig" -ForegroundColor Yellow
    Write-Host "   ‚Üí Besser: Manuell 'Unload Work-DLL' in Revit klicken" -ForegroundColor White
    
    $choice = Read-Host "`nM√∂chten Sie es trotzdem versuchen? (j/n)"
    
    if ($choice -eq "j" -or $choice -eq "J" -or $choice -eq "y" -or $choice -eq "Y") {
        Write-Host "‚ö†Ô∏è  Versuche automatisches Entladen..." -ForegroundColor Yellow
        # Hier w√ºrde die komplexe COM-Interop Logik stehen
        Write-Host "‚ùå Automatisches Entladen fehlgeschlagen - manueller Eingriff n√∂tig" -ForegroundColor Red
        exit 1
    } else {
        Write-Host "‚úÖ Automatisches Entladen abgebrochen" -ForegroundColor Green
        exit 0
    }
} catch {
    Write-Host "‚ùå Fehler beim automatischen Entladen: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}