# 🚀 REVIT HOT RELOAD ARCHITEKTUR - CHECKLISTE
# GeoJSON Importer - Hot Reload System
# ERSTELLT: 2024-12-19 (Funktionierende Architektur!)

## 🏗️ ARCHITEKTUR-ÜBERSICHT

### 🚨 KRITISCHE ARCHITEKTUR-REGEL (NIEMALS VERLETZEN!)

**Die Loader-DLL (GeoJsonImporter.dll) ist NUR ein Dummy!**

#### ✅ **RICHTIG - Loader-DLL (GeoJsonImporter.dll):**
- **NUR Revit API Referenzen** (RevitAPI.dll, RevitAPIUI.dll)
- **KEINE Package References** (kein GeoJSON.Net, kein Newtonsoft.Json!)
- **NUR Dummy-Code:** App.cs, Proxy-Commands, WorkDllManager
- **Kann NICHT ausgetauscht werden** (statisch in Revit geladen)

#### ✅ **RICHTIG - Work-DLL (GeoJsonImporter.Work.dll):**
- **ALLE Package References** (GeoJSON.Net, Newtonsoft.Json, etc.)
- **ALLE echten Commands** (Business Logic)
- **Kann zur Laufzeit ausgetauscht werden** (Hot Reload fähig)

#### ❌ **FALSCH - NIEMALS TUN:**
- **Package References in Loader-DLL hinzufügen** (zerstört Architektur!)
- **Business Logic in Loader-DLL schreiben** (zerstört Hot Reload!)
- **Work-DLL Referenzen in Loader-DLL** (verursacht "Klasse nicht gefunden")

---

### Loader-DLL (GeoJsonImporter.dll)
- **Enthält:** UI-Management (App.cs) + Proxy-Commands + WorkDllManager + Load/Unload Commands
- **Zweck:** Lädt Work-DLL und delegiert Commands
- **Hot Reload:** Kann NICHT ausgetauscht werden

### Work-DLL (GeoJsonImporter.Work.dll)  
- **Enthält:** Alle echten Commands (Business Logic)
- **Zweck:** Implementiert die eigentliche Funktionalität
- **Hot Reload:** Kann zur Laufzeit ausgetauscht werden

## 🔄 HOT RELOAD WORKFLOW

### 1. Entwicklung
1. **Work-DLL Code ändern**
2. **Work-DLL neu bauen**
3. **"Unload Work-DLL" in Revit klicken**
4. **"Load Work-DLL" in Revit klicken**
5. **Neue Funktionalität testen**

### 2. Architektur
```
Revit → App.cs → Loader-DLL Proxy-Command → WorkDllManager → Work-DLL echte Commands
  ↓         ↓              ↓                    ↓              ↓
UI      Button    Loader-DLL (statisch)    Delegation    Business Logic (Hot Reload)
```

## ✅ ARCHITEKTUR-SCHNELLCHECK

### 1. Loader-DLL (GeoJsonImporter.csproj)
- [ ] Enthält: WorkDllManager.cs, LoadWorkDllCommand.cs, UnloadWorkDllCommand.cs
- [ ] Enthält Proxy-Commands: AbracadabraCommand.cs, SetupCommand.cs, ImportGeoJsonCommand.cs
- [ ] App.cs zeigt auf Loader-DLL Proxy-Commands

### 2. Work-DLL (GeoJsonImporter.Work.csproj)
- [ ] Enthält alle echten Commands: AbracadabraWorkCommand.cs, SetupWorkCommand.cs, ImportGeoJsonWorkCommand.cs
- [ ] Keine Referenzen auf Loader-DLL
- [ ] Alle Commands implementieren IExternalCommand

### 3. WorkDllManager
- [ ] Lädt Work-DLL in AssemblyLoadContext
- [ ] Delegiert Commands über spezifische Methoden (ExecuteAbracadabra, ExecuteWorkCommand)
- [ ] Keine generischen Methoden mit commandName Parameter

## 🚨 VERBOTENE AKTIONEN

### ❌ NIEMALS:
1. **App.cs zeigt direkt auf Work-DLL Commands** (verursacht "Klasse nicht gefunden")
2. **WorkDllManager modifizieren** (neue generische Methoden)
3. **Work-DLL referenziert Loader-DLL**
4. **Generische ExecuteWorkCommand(string commandName, ...)** verwenden

### ✅ IMMER:
1. **Proxy-Commands in Loader-DLL** für alle Funktionalität
2. **Echte Commands in Work-DLL** implementieren
3. **App.cs zeigt auf Loader-DLL Proxy-Commands**
4. **Spezifische WorkDllManager-Methoden** verwenden

## 🔧 BEHEBUNG VON PROBLEMEN

### "Klasse nicht gefunden" Fehler
1. **Prüfe:** Ist Proxy-Command in Loader-DLL vorhanden?
2. **Prüfe:** Zeigt App.cs auf den richtigen Proxy-Command?
3. **Prüfe:** Ist Work-DLL erfolgreich geladen?
4. **Prüfe:** Funktioniert WorkDllManager?

### Hot Reload funktioniert nicht
1. **Prüfe:** Sind Load/Unload Commands korrekt?
2. **Prüfe:** Ist WorkDllManager unverändert?
3. **Prüfe:** Sind alle Commands in der richtigen DLL?

## 📚 DATEI-STRUKTUR

### Loader-DLL
```
src/GeoJsonImporter/Addin/
├── App.cs (zeigt auf Proxy-Commands)
├── Commands/
│   ├── WorkDllManager.cs
│   ├── LoadWorkDllCommand.cs
│   ├── UnloadWorkDllCommand.cs
│   ├── AbracadabraCommand.cs (Proxy)
│   ├── SetupCommand.cs (Proxy)
│   └── ImportGeoJsonCommand.cs (Proxy)
```

### Work-DLL
```
src/GeoJsonImporter.Work/Commands/
├── AbracadabraWorkCommand.cs (echt)
├── SetupWorkCommand.cs (echt)
└── ImportGeoJsonWorkCommand.cs (echt)
```

## 🎯 FAZIT

**Proxy-Commands gehören in die Loader-DLL!**
- **App.cs** → **Loader-DLL Proxy-Commands**
- **Proxy-Commands** → **WorkDllManager** → **Work-DLL echte Commands**
- **Das ist die korrekte Hot Reload Architektur!**

**WICHTIG: Verwende spezifische WorkDllManager-Methoden, keine generischen!**

---
*Erstellt nach der erfolgreichen Implementierung vom 19.12.2024*